#!avview_shell

add_parameter_pane "/Diagnostics" "Diagnostics" \
	"Version information" heading "" \
	"AVview version" entry "avview_version" \
	"Tcl version"  entry "tcl_version" \
	"Tk version" entry "tk_version" \
	"Additional diagnostics" heading "" \
	"Show XVideo information" command {switch_to_pane "/Diagnostics/xvinfo"
		set xvinfo_pane [get_pane_frame "/Diagnostics/xvinfo"]
		$xvinfo_pane.f.refresh invoke} \
	"Show kernel debug messages" command {switch_to_pane "/Diagnostics/dmesg"
		set dmesg_pane [get_pane_frame "/Diagnostics/dmesg"]
		$dmesg_pane.f.refresh invoke} 
	

add_pane "/Diagnostics/xvinfo" "XVideo extension information" 
add_pane "/Diagnostics/dmesg" "Kernel debug messages"
add_pane "/Diagnostics/modules" "Loaded modules"

proc make_text_holder { pane refresh_cmd} {
button $pane.f.refresh -text "Refresh" -command $refresh_cmd
grid $pane.f.refresh -pady 3 -padx 3
scrollbar $pane.f.vsb -command "$pane.f.text yview" -orient vert
scrollbar $pane.f.hsb -command "$pane.f.text xview" -orient horiz
text $pane.f.text -xscrollcommand "$pane.f.hsb set" -yscrollcommand "$pane.f.vsb set"
grid $pane.f.text - $pane.f.vsb -sticky news
grid $pane.f.hsb - - -sticky news
grid columnconfig $pane.f 1 -weight 1

$pane.f.refresh invoke
}


set xvinfo_pane [get_pane_frame "/Diagnostics/xvinfo"]

make_text_holder $xvinfo_pane {
	set a "Failed to run xvinfo"
	catch {
		set a [exec xvinfo]
		} b
	set xvinfo_pane [get_pane_frame "/Diagnostics/xvinfo"]
	$xvinfo_pane.f.text delete 0.0 end
	if { $a != "Failed to run xvinfo" } {
		$xvinfo_pane.f.text insert end $a
		$xvinfo_pane.f.text insert end "-------------------------------------"
		}
	regsub {child process exited abnormally.?.?.?$} $b "" c
	$xvinfo_pane.f.text insert end $c
	$xvinfo_pane.f.text see 0.0
	}

set dmesg_pane [get_pane_frame "/Diagnostics/dmesg"]

make_text_holder $dmesg_pane {
	set a "Failed to run dmesg"
	catch {
		set a [exec dmesg]
		} b
	set dmesg_pane [get_pane_frame "/Diagnostics/dmesg"]
	$dmesg_pane.f.text delete 0.0 end
	if { $a != "Failed to run dmesg" } {
		$dmesg_pane.f.text insert end $a
		$dmesg_pane.f.text insert end "-------------------------------------"
		}
	regsub {child process exited abnormally.?.?.?$} $b "" c
	$dmesg_pane.f.text insert end $c
	$dmesg_pane.f.text see end
	}

set modules_pane [get_pane_frame "/Diagnostics/modules"]

make_text_holder $modules_pane {
	set a "Failed to read /proc/modules"
	catch {
		set FILE [open "/proc/modules" "r"]
		set a [read $FILE]
		close $FILE
		} b
	set modules_pane [get_pane_frame "/Diagnostics/modules"]
	$modules_pane.f.text delete 0.0 end
	if { $a != "Failed to read /proc/modules" } {
		$modules_pane.f.text insert end $a
		$modules_pane.f.text insert end "-------------------------------------"
		}
	$modules_pane.f.text insert end $b
	$modules_pane.f.text see 0.0
	}

