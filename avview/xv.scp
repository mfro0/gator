#!./avview_shell

proc find_attribute_widget {video_window port attribute} {
set type1  [xv_port_attribute_type $video_window $port $attribute]
set range [xv_port_attribute_range $video_window $port $attribute]
set name [xv_port_attribute_name $video_window $port $attribute]
if {$name == "XV_ENCODING" } { return "none" }
if {$name == "XV_AUTOPAINT_COLORKEY" } { return "none" }
if {$name == "XV_SET_DEFAULTS" } { return "button" }
if {$name == "XV_COLORKEY" } { return "none" }
if {$name == "XV_TUNER_STATUS" } { 
	global tuner_status_present_$port
	set tuner_status_present_$port true
	return "none" 
	}
if {$name == "XV_MUTE" } { 
	global audio_mute_present_$port
	set audio_mute_present_$port true
	}
if {$name == "XV_FREQ" } { 
	global tuner_freq_present_$port
	set tuner_freq_present_$port true
	}
if { [lsearch $type1 "gettable"] < 0 } { return "unreadable" }
if { [lsearch $type1 "settable"] < 0 } { return "label" }
if { "$range" == "0 1" } { return "toggle" }
if { [lindex $range 1] > 1000000 } { return "entry" }
if { [lindex $range 1] < [lindex $range 0] } { return "entry" }
return "slider"
}

proc translate_attribute_name { name } {
if { $name == "XV_SET_DEFAULTS" } { return "Set defaults" }
if { $name == "XV_AUTOPAINT_COLORKEY" } { return "Autopaint colorkey" }
if { $name == "XV_DEC_BRIGHTNESS" } { return "Capture brightness"}
if { $name == "XV_DEC_CONTRAST" } { return "Capture contrast"}
if { $name == "XV_DEC_SATURATION" } { return "Capture saturation"}
if { $name == "XV_DEC_HUE" } { return "Capture hue"}
regsub "XV_" "$name" "" name1
regsub "_" "$name1" " " name1
set name2 [string tolower $name1 1 end]
set name3 [string toupper $name2 0 0]
return $name3
}

proc find_attribute_variable {video_window port attribute} {
return "ATTRIBUTE.$port.$attribute"
}

proc on_attribute_change { attr_name variable a b } {
global $variable
global VIDEO_WINDOW
global current_port
if { $current_port == "none" } { return }
xv_setportattribute $VIDEO_WINDOW $current_port $attr_name [set $variable]
#puts "$attr_name=[set $variable]"
#
# The following is a hack.. 
# do this properly after XvNotify support is complete
#
update_attribute_variables
}

proc create_attribute_widget {widget video_window port attribute} {
set range [xv_port_attribute_range $video_window $port $attribute]
set name [xv_port_attribute_name $video_window $port $attribute]
set attr_var [find_attribute_variable $video_window $port $attribute]
set type [find_attribute_widget $video_window $port $attribute]
set suffix "${port}_$attribute"
global $attr_var

global attr_count

#puts "$name $range $type"
switch  $type {
	"none" {
		return
		}
	"label" {
		label $widget.label$suffix -text [translate_attribute_name $name]
		entry $widget.entry$suffix -textvariable $attr_var -state disabled
		eval $widget.label$suffix configure [get_settings $widget.label$suffix AVview XVideo attribute $port $attribute $attr_count]
		eval $widget.entry$suffix configure [get_settings $widget.entry$suffix AVview XVideo attribute $port $attribute $attr_count]
		grid $widget.label$suffix $widget.entry$suffix -sticky news
		grid configure $widget.label$suffix -sticky news 
		}
	"entry" {     
		label $widget.label$suffix -text [translate_attribute_name $name]
		entry $widget.entry$suffix -textvariable $attr_var
		eval $widget.label$suffix configure [get_settings $widget.label$suffix AVview XVideo attribute $port $attribute $attr_count]
		eval $widget.entry$suffix configure [get_settings $widget.entry$suffix AVview XVideo attribute $port $attribute $attr_count]
		grid $widget.label$suffix $widget.entry$suffix -sticky news
		grid configure $widget.label$suffix -sticky news 
		}	
	"toggle" {
		label $widget.label$suffix -text [translate_attribute_name $name]
		checkbutton $widget.checkbutton$suffix -variable $attr_var \
			-onvalue 1 -offvalue 0
		eval $widget.label$suffix configure [get_settings $widget.label$suffix AVview XVideo attribute $port $attribute $attr_count]
		eval $widget.checkbutton$suffix configure [get_settings $widget.checkbutton$suffix AVview XVideo attribute $port $attribute $attr_count]
		grid $widget.label$suffix $widget.checkbutton$suffix -sticky news
		grid configure $widget.label$suffix -sticky news
		}
	"button" {
		label $widget.label$suffix -text [translate_attribute_name $name]
		button $widget.button$suffix -command "xv_setportattribute $video_window $port $name 1; update_attribute_variables"\
			-text "perform now"
		eval $widget.label$suffix configure [get_settings $widget.label$suffix AVview XVideo attribute $port $attribute $attr_count]
		eval $widget.button$suffix configure [get_settings $widget.button$suffix AVview XVideo attribute $port $attribute $attr_count]
		grid $widget.label$suffix $widget.button$suffix -sticky news 
		grid configure $widget.label$suffix -sticky news
		}
	"slider" {
		label $widget.label$suffix -text [translate_attribute_name $name]
		scale $widget.scale$suffix -from [lindex $range 0] -to [lindex $range 1] \
			-variable $attr_var -orient horizontal
		eval $widget.label$suffix configure [get_settings $widget.label$suffix AVview XVideo attribute $port $attribute $attr_count]
		eval $widget.scale$suffix configure [get_settings $widget.scale$suffix AVview XVideo attribute $port $attribute $attr_count]
		grid $widget.label$suffix $widget.scale$suffix -sticky news
		grid configure $widget.label$suffix -sticky news
		}
	}
incr attr_count
if { $type != "button" } {
	trace vdelete $attr_var w "on_attribute_change $name"
	set $attr_var [xv_getportattribute $video_window $port "$name"]
	trace variable $attr_var w "on_attribute_change $name"
	}
}

proc update_attribute_variables {} {
global VIDEO_WINDOW
global current_port
if { $current_port == "none" } { return }
set num_attributes [xv_num_port_attributes $VIDEO_WINDOW $current_port]
for {set i 0 } { $i < $num_attributes} { incr i } {
	set range [xv_port_attribute_range $VIDEO_WINDOW $current_port $i]
	set name [xv_port_attribute_name $VIDEO_WINDOW $current_port $i]
	set attr_var [find_attribute_variable $VIDEO_WINDOW $current_port $i]
	set type [find_attribute_widget $VIDEO_WINDOW $current_port $i]
	global $attr_var
	if { ($type != "button") && ($type != "none") } {
		catch "
			set $attr_var
			trace vdelete $attr_var w \"on_attribute_change $name\"
			set $attr_var [xv_getportattribute $VIDEO_WINDOW $current_port $name]
			trace variable $attr_var w \"on_attribute_change $name\"
			"
		}
	}
}

proc generate_attributes_window { af } {
global VIDEO_WINDOW
global current_port
global attributes_window

foreach win [grid slaves $af] { destroy $win }

set af_info [grid info $af]
set master [get_value $af_info "-in"]
set column [get_value $af_info "-column"]
set row [get_value $af_info "-row"]
puts "master=$master row=$row column=$column"
if { !$attributes_window || ("$current_port" == "none")} { 
	if { "$master" != "" } {
		grid columnconfigure $master $column -weight 0
		}
	canvas $af.l -width 0 -height 0 -background red
	grid columnconfigure .controlwin 0 -weight 0
	grid $af.l
	return 
	}
if { "$master" != "" } {
	grid columnconfigure $master $column -weight 1
	grid rowconfigure $master [expr $row+1] -weight 1
	}

grid columnconfigure .controlwin 0 -weight 1

label $af.title -text "Attributes" -background black -foreground white
grid $af.title - -sticky news -pady 2 -padx 2 -row 0

eval frame $af.f1 -relief groove -borderwidth 2 [get_settings $af.f1 AVview XVideo]

grid $af.f1 - -sticky news -pady 2 -padx 2
grid rowconfig $af 1 -weight 1

canvas $af.f1.c -yscrollcommand "$af.f1.vscroll set" -bd 0 -borderwidth 0\
	-highlightthickness 0 -confine "yes" -relief flat
scrollbar $af.f1.vscroll -command "$af.f1.c yview" -orient vertical 

eval $af.f1.c configure [get_settings $af.f1.c AVview XVideo]
eval $af.f1.vscroll configure [get_settings $af.f1.vscroll AVview XVideo]

#grid $af.f1.c - $af.f1.vscroll -sticky news
#grid rowconfig $af.f1 0 -weight 1
#grid columnconfig $af.f1 0 -weight 1

grid $af.f1.vscroll $af.f1.c -  -sticky news
grid rowconfig $af.f1 0 -weight 1
grid columnconfig $af.f1 1 -weight 1

eval frame $af.f1.c.f [get_settings $af.f1.c.f AVview XVideo]
$af.f1.c create window 5 0 -window $af.f1.c.f -anchor nw

set NUM_ATTRIBUTES [xv_num_port_attributes $VIDEO_WINDOW $current_port]
global attr_count
set attr_count 0
for { set i 0 } {$i < $NUM_ATTRIBUTES } { incr i } {
	create_attribute_widget $af.f1.c.f $VIDEO_WINDOW $current_port $i
	}
grid columnconfigure $af 1 -weight 1
update
set bbox [grid bbox $af.f1.c.f]
$af.f1.c configure -scrollregion "[grid bbox $af.f1.c.f]" -width [expr [lindex $bbox 2]+8]

}

proc set_port {name1 name2 op} {
global current_port_menu
global current_port
global VIDEO_WINDOW
global current_encoding_menu
global current_encoding
global attributes_window

#
# check that the port is valid
#

if { [find_port_adaptor $current_port] < 0 } { 
	set current_port "none"
	return 	
	}
global tuner_status_present_$current_port
global audio_mute_present_$current_port
global tuner_freq_present_$current_port
set tuner_status_present_$current_port false
set audio_mute_present_$current_port false
set tuner_freq_present_$current_port false

set NUM_ENCODINGS [xv_num_port_encodings $VIDEO_WINDOW $current_port]

$current_encoding_menu delete 0 end
for {set i 0 } {$i < $NUM_ENCODINGS} {incr i} {
	$current_encoding_menu add radiobutton -label "[xv_port_encoding_name $VIDEO_WINDOW $current_port $i]" -value "[xv_port_encoding_name $VIDEO_WINDOW $current_port $i]" -variable current_encoding_name
	}

set current_encoding [xv_getportattribute $VIDEO_WINDOW $current_port "XV_ENCODING"]
if { $current_encoding >= 0 } {
	set current_encoding_name [lindex [xv_port_encodings $VIDEO_WINDOW $current_port] $current_encoding]
	}

update_attribute_variables
generate_attributes_window .controlwin.allattributes

display_video
}


